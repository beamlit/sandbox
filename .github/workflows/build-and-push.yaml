name: Sandbox Build and Push
on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:
    inputs:
      sandbox:
        description: "Sandbox to import"
      all:
        description: "Import all Sandbox"
        type: boolean
        required: false
        default: false

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      sandbox: ${{ steps.retrieve-sandbox.outputs.sandbox }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch last 2 commits to compare changes
      - name: Retrieve sandbox
        id: retrieve-sandbox
        shell: bash
        run: |
          if [[ ! -z "${{ inputs.sandbox }}" ]]; then
            echo "sandbox=[\"${{ inputs.sandbox }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get list of all Sandbox files
          all_uvm=$(tree -J -L 1 hub | jq -c '.[0].contents | map(select(.name) | .name | rtrimstr(".json"))')

          # Filter Sandbox based on changes
          changed_uvm=()

          if [[ "${{ inputs.all }}" == "true" ]]; then
            echo "Importing all Sandbox"
            echo "sandbox=$all_uvm" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if there are changes in sandbox-api
          if git diff --name-only HEAD^ HEAD | grep -q "sandbox-api/"; then
            echo "Changes detected in sandbox-api, including all Sandbox"
            echo "sandbox=$all_uvm" >> $GITHUB_OUTPUT
            exit 0
          else
            for sandbox in $(echo $all_uvm | jq -r '.[]'); do
              if git diff --name-only HEAD^ HEAD | grep -q "Dockerfile.${sandbox}" || git diff --name-only HEAD^ HEAD | grep -q "hub/${sandbox}.json"; then
                changed_uvm+=("$sandbox")
              fi
            done
          fi

          # Convert array to JSON array
          if [ ${#changed_uvm[@]} -eq 0 ]; then
            echo "No Sandbox with changes found"
            echo "sandbox=[]" >> $GITHUB_OUTPUT
          else
            # Create a properly formatted JSON array
            uvm_json="["
            for sandbox in "${changed_uvm[@]}"; do
              if [ "$uvm_json" != "[" ]; then
                uvm_json="$uvm_json,"
              fi
              uvm_json="$uvm_json\"$sandbox\""
            done
            uvm_json="$uvm_json]"
            echo "sandbox=$uvm_json" >> $GITHUB_OUTPUT
          fi
  publish:
    runs-on: ubuntu-latest
    if: needs.generate-matrix.outputs.sandbox != '[]'
    environment: |-
      ${{
        github.ref_name == 'main' && 'prod'
      || github.ref_name == 'develop' && 'dev'
      || 'dev'
      }}
    env:
      BL_API_URL: ${{ vars.BL_API_URL }}
      BL_ADMIN_USERNAME: ${{ vars.BL_ADMIN_USERNAME }}
      BL_ADMIN_PASSWORD: ${{ secrets.BL_ADMIN_PASSWORD }}
      UKC_TOKEN: ${{ secrets.UKC_TOKEN }}
      UKC_METRO: ${{ vars.UKC_METRO }}
      BL_ENV: ${{ vars.BL_ENV }}
    needs:
      - generate-matrix
    strategy:
      matrix:
        sandbox: ${{ fromJson(needs.generate-matrix.outputs.sandbox )}}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Echo sandbox
        run: |
          echo "Sandbox: ${{ matrix.sandbox }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Setup binary folder
        run: |
          echo "$PWD/bin" >> $GITHUB_PATH
      - name: Build and push
        env:
          TAG: ${{ github.run_id }}
        run: |
          sh build.sh ${{ matrix.sandbox }}
